{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/isomorphic-fetch/fetch-npm-browserify.js","node_modules/pubsub-js/src/pubsub.js","node_modules/whatwg-fetch/fetch.js","src/scripts/index.js","src/scripts/penguin-controller.js","src/scripts/penguin-model.js","src/scripts/penguin-view.js"],"names":[],"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n","/*\nCopyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\nLicense: MIT - http://mrgnrdrck.mit-license.org\n\nhttps://github.com/mroderick/PubSubJS\n*/\n(function (root, factory){\n\t'use strict';\n\n\tvar PubSub = {};\n\troot.PubSub = PubSub;\n\tfactory(PubSub);\n\n\t// AMD support\n\tif (typeof define === 'function' && define.amd){\n\t\tdefine(function() { return PubSub; });\n\n\t// CommonJS and Node.js module support\n\t} else if (typeof exports === 'object'){\n\t\tif (module !== undefined && module.exports) {\n\t\t\texports = module.exports = PubSub; // Node.js specific `module.exports`\n\t\t}\n\t\texports.PubSub = PubSub; // CommonJS module 1.1.1 spec\n\t\tmodule.exports = exports = PubSub; // CommonJS\n\t}\n\n}(( typeof window === 'object' && window ) || this, function (PubSub){\n\t'use strict';\n\n\tvar messages = {},\n\t\tlastUid = -1;\n\n\tfunction hasKeys(obj){\n\t\tvar key;\n\n\t\tfor (key in obj){\n\t\t\tif ( obj.hasOwnProperty(key) ){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t *\tReturns a function that throws the passed exception, for use as argument for setTimeout\n\t *\t@param { Object } ex An Error object\n\t */\n\tfunction throwException( ex ){\n\t\treturn function reThrowException(){\n\t\t\tthrow ex;\n\t\t};\n\t}\n\n\tfunction callSubscriberWithDelayedExceptions( subscriber, message, data ){\n\t\ttry {\n\t\t\tsubscriber( message, data );\n\t\t} catch( ex ){\n\t\t\tsetTimeout( throwException( ex ), 0);\n\t\t}\n\t}\n\n\tfunction callSubscriberWithImmediateExceptions( subscriber, message, data ){\n\t\tsubscriber( message, data );\n\t}\n\n\tfunction deliverMessage( originalMessage, matchedMessage, data, immediateExceptions ){\n\t\tvar subscribers = messages[matchedMessage],\n\t\t\tcallSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\n\t\t\ts;\n\n\t\tif ( !messages.hasOwnProperty( matchedMessage ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (s in subscribers){\n\t\t\tif ( subscribers.hasOwnProperty(s)){\n\t\t\t\tcallSubscriber( subscribers[s], originalMessage, data );\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction createDeliveryFunction( message, data, immediateExceptions ){\n\t\treturn function deliverNamespaced(){\n\t\t\tvar topic = String( message ),\n\t\t\t\tposition = topic.lastIndexOf( '.' );\n\n\t\t\t// deliver the message as it is now\n\t\t\tdeliverMessage(message, message, data, immediateExceptions);\n\n\t\t\t// trim the hierarchy and deliver message to each level\n\t\t\twhile( position !== -1 ){\n\t\t\t\ttopic = topic.substr( 0, position );\n\t\t\t\tposition = topic.lastIndexOf('.');\n\t\t\t\tdeliverMessage( message, topic, data, immediateExceptions );\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction messageHasSubscribers( message ){\n\t\tvar topic = String( message ),\n\t\t\tfound = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic])),\n\t\t\tposition = topic.lastIndexOf( '.' );\n\n\t\twhile ( !found && position !== -1 ){\n\t\t\ttopic = topic.substr( 0, position );\n\t\t\tposition = topic.lastIndexOf( '.' );\n\t\t\tfound = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic]));\n\t\t}\n\n\t\treturn found;\n\t}\n\n\tfunction publish( message, data, sync, immediateExceptions ){\n\t\tvar deliver = createDeliveryFunction( message, data, immediateExceptions ),\n\t\t\thasSubscribers = messageHasSubscribers( message );\n\n\t\tif ( !hasSubscribers ){\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( sync === true ){\n\t\t\tdeliver();\n\t\t} else {\n\t\t\tsetTimeout( deliver, 0 );\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t *\tPubSub.publish( message[, data] ) -> Boolean\n\t *\t- message (String): The message to publish\n\t *\t- data: The data to pass to subscribers\n\t *\tPublishes the the message, passing the data to it's subscribers\n\t**/\n\tPubSub.publish = function( message, data ){\n\t\treturn publish( message, data, false, PubSub.immediateExceptions );\n\t};\n\n\t/**\n\t *\tPubSub.publishSync( message[, data] ) -> Boolean\n\t *\t- message (String): The message to publish\n\t *\t- data: The data to pass to subscribers\n\t *\tPublishes the the message synchronously, passing the data to it's subscribers\n\t**/\n\tPubSub.publishSync = function( message, data ){\n\t\treturn publish( message, data, true, PubSub.immediateExceptions );\n\t};\n\n\t/**\n\t *\tPubSub.subscribe( message, func ) -> String\n\t *\t- message (String): The message to subscribe to\n\t *\t- func (Function): The function to call when a new message is published\n\t *\tSubscribes the passed function to the passed message. Every returned token is unique and should be stored if\n\t *\tyou need to unsubscribe\n\t**/\n\tPubSub.subscribe = function( message, func ){\n\t\tif ( typeof func !== 'function'){\n\t\t\treturn false;\n\t\t}\n\n\t\t// message is not registered yet\n\t\tif ( !messages.hasOwnProperty( message ) ){\n\t\t\tmessages[message] = {};\n\t\t}\n\n\t\t// forcing token as String, to allow for future expansions without breaking usage\n\t\t// and allow for easy use as key names for the 'messages' object\n\t\tvar token = 'uid_' + String(++lastUid);\n\t\tmessages[message][token] = func;\n\n\t\t// return token for unsubscribing\n\t\treturn token;\n\t};\n\n\t/* Public: Clears all subscriptions\n\t */\n\tPubSub.clearAllSubscriptions = function clearAllSubscriptions(){\n\t\tmessages = {};\n\t};\n\n\t/*Public: Clear subscriptions by the topic\n\t*/\n\tPubSub.clearSubscriptions = function clearSubscriptions(topic){\n\t\tvar m;\n\t\tfor (m in messages){\n\t\t\tif (messages.hasOwnProperty(m) && m.indexOf(topic) === 0){\n\t\t\t\tdelete messages[m];\n\t\t\t}\n\t\t}\n\t};\n\n\t/* Public: removes subscriptions.\n\t * When passed a token, removes a specific subscription.\n\t * When passed a function, removes all subscriptions for that function\n\t * When passed a topic, removes all subscriptions for that topic (hierarchy)\n\t *\n\t * value - A token, function or topic to unsubscribe.\n\t *\n\t * Examples\n\t *\n\t *\t\t// Example 1 - unsubscribing with a token\n\t *\t\tvar token = PubSub.subscribe('mytopic', myFunc);\n\t *\t\tPubSub.unsubscribe(token);\n\t *\n\t *\t\t// Example 2 - unsubscribing with a function\n\t *\t\tPubSub.unsubscribe(myFunc);\n\t *\n\t *\t\t// Example 3 - unsubscribing a topic\n\t *\t\tPubSub.unsubscribe('mytopic');\n\t */\n\tPubSub.unsubscribe = function(value){\n\t\tvar descendantTopicExists = function(topic) {\n\t\t\t\tvar m;\n\t\t\t\tfor ( m in messages ){\n\t\t\t\t\tif ( messages.hasOwnProperty(m) && m.indexOf(topic) === 0 ){\n\t\t\t\t\t\t// a descendant of the topic exists:\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tisTopic    = typeof value === 'string' && ( messages.hasOwnProperty(value) || descendantTopicExists(value) ),\n\t\t\tisToken    = !isTopic && typeof value === 'string',\n\t\t\tisFunction = typeof value === 'function',\n\t\t\tresult = false,\n\t\t\tm, message, t;\n\n\t\tif (isTopic){\n\t\t\tPubSub.clearSubscriptions(value);\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( m in messages ){\n\t\t\tif ( messages.hasOwnProperty( m ) ){\n\t\t\t\tmessage = messages[m];\n\n\t\t\t\tif ( isToken && message[value] ){\n\t\t\t\t\tdelete message[value];\n\t\t\t\t\tresult = value;\n\t\t\t\t\t// tokens are unique, so we can just stop here\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (isFunction) {\n\t\t\t\t\tfor ( t in message ){\n\t\t\t\t\t\tif (message.hasOwnProperty(t) && message[t] === value){\n\t\t\t\t\t\t\tdelete message[t];\n\t\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n}));\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","const controller = require('./penguin-controller');\nconst view = require('./penguin-view');\nconst model = require('./penguin-model');\n\nconst modeWithUrl = () =>\n  Object.assign({},\n    model, { fetchData: model.fetchData('http://localhost:4000/api') });\n\nconst viewWithRoot = () =>\n  Object.assign({},\n    view, { initPenguinView: view.initPenguinView({ id: 'root' }) });\n\nconst onDOMContentLoaded = () => {\n  controller.initialize(modeWithUrl(), viewWithRoot());\n};\n\nwindow.document.addEventListener('DOMContentLoaded', onDOMContentLoaded);\n","const dataUpdateListener = ({ updatePenguin }) => (topic, { data, index }) => {\n  updatePenguin(data[index]);\n};\n\nconst subscribeModelListeners = (penguinView = {}, subscribe = () => {}, dataUpdate = '') => {\n  subscribe([\n    { topic: dataUpdate, callback: dataUpdateListener(penguinView) },\n  ]);\n};\n\nconst clickEvtListener = ({ updateIndex }) => ({ target }) => {\n  if (target.nodeName !== 'BUTTON') return;\n\n  const getIndex = {\n    'next-penguin': () => 1,\n    'previous-penguin': () => -1,\n  };\n\n  updateIndex(getIndex[target.id]());\n};\n\nconst initialize = (penguinModel = {}, penguinView = {}) => {\n  penguinView.initPenguinView();\n  penguinView.penguinControlls();\n  penguinView.addEventClickListener(clickEvtListener(penguinModel));\n\n  subscribeModelListeners(\n    penguinView,\n    penguinModel.subscribe,\n    penguinModel.DATA_UPDATE);\n\n  penguinModel.fetchData();\n};\n\nmodule.exports = {\n  initialize,\n};\n","const PubSub = require('pubsub-js');\nconst fetch = require('isomorphic-fetch');\n\nconst DATA_UPDATE = 'data.updated';\n\nlet model = {\n  data: [],\n  index: 0,\n};\n\nconst getModel = () => Object.assign({}, model);\n\nconst setData = (data) => {\n  model = Object.assign({}, model, { data });\n  PubSub.publish(DATA_UPDATE, getModel());\n};\n\nconst updateIndex = (idx) => {\n  const { index, data } = getModel();\n  if (index + idx < 0) return;\n  if (index + idx > data.length - 1) return;\n\n  model = Object.assign({}, model, { index: index + idx });\n  PubSub.publish(DATA_UPDATE, getModel());\n};\n\nconst subscribe = (subscribers) => {\n  subscribers.forEach(({ topic, callback }) => {\n    PubSub.subscribe(topic, callback);\n  });\n};\n\nconst fetchData = endpoint => () =>\n  fetch(`${endpoint}/data`)\n    .then((resp) => {\n      if (resp.status === 200) {\n        return resp.json();\n      }\n      return Promise.reject(new Error(`error:${resp.status}`));\n    })\n    .then(setData)\n    .then(() => 'done')\n    .catch((err) => {\n      console.error(err.message);\n    });\n\nmodule.exports = {\n  fetchData,\n  updateIndex,\n  subscribe,\n  DATA_UPDATE,\n};\n","const $qs = selector => window.document.querySelector.bind(window.document)(selector);\n\nconst addEventClickListener = (clickEvtListner) => {\n  $qs('#penguinView').addEventListener('click', clickEvtListner);\n};\n\nconst emptyElement = ($elm) => {\n  $elm.innerHTML = ''; // eslint-disable-line  no-param-reassign\n};\n\nconst penguinTitle = ({ name }) => {\n  const $header = $qs('#penguinView header');\n  const $h3 = window.document.createElement('h3');\n  $h3.appendChild(window.document.createTextNode(name));\n  emptyElement($header);\n  $header.appendChild($h3);\n};\n\nconst penguinImage = ({ imageUrl, name }) => {\n  const $penguinImage = $qs('#penguinView .penguin-image');\n  const $img = window.document.createElement('img');\n  $img.setAttribute('src', imageUrl);\n  $img.setAttribute('alt', `image ${name}`);\n  emptyElement($penguinImage);\n  $penguinImage.appendChild($img);\n};\n\nconst penguinInfo = ({ size, favoriteFood }) => {\n  const $penguinInfo = $qs('#penguinView .penguin-info');\n  const fragment = window.document.createDocumentFragment();\n\n  [{ label: 'Size: ', data: size },\n    { label: 'Favorite food: ', data: favoriteFood },\n  ].forEach((item) => {\n    const $p = window.document.createElement('p');\n    const $span = window.document.createElement('span');\n\n    $span.appendChild(window.document.createTextNode(item.label));\n    $p.appendChild($span);\n\n    $p.appendChild(window.document.createTextNode(item.data));\n    fragment.appendChild($p);\n  });\n\n  emptyElement($penguinInfo);\n  $penguinInfo.appendChild(fragment);\n};\n\nconst penguinControlls = () => {\n  const $penguinControlls = $qs('#penguinView .penguin-controlls');\n  const fragment = window.document.createDocumentFragment();\n\n  ['previous', 'next'].forEach((item) => {\n    const $button = window.document.createElement('button');\n    $button.setAttribute('id', `${item}-penguin`);\n    $button.appendChild(window.document.createTextNode(item));\n    fragment.appendChild($button);\n  });\n\n  emptyElement($penguinControlls);\n  $penguinControlls.appendChild(fragment);\n};\n\nconst initPenguinView = ({ id }) => () => {\n  const $root = $qs(`#${id}`);\n\n  const $penguinView = window.document.createElement('div');\n  $penguinView.setAttribute('id', 'penguinView');\n\n  const $header = window.document.createElement('header');\n\n  $penguinView.appendChild($header);\n\n  ['penguin-image', 'penguin-info', 'penguin-controlls']\n    .forEach((item) => {\n      const $section = window.document.createElement('section');\n      $section.classList.add(item);\n      $penguinView.appendChild($section);\n    });\n\n  emptyElement($root);\n\n  $root.appendChild($penguinView);\n};\n\nconst updatePenguin = (props) => {\n  penguinTitle(props);\n  penguinImage(props);\n  penguinInfo(props);\n};\n\nmodule.exports = {\n  initPenguinView,\n  penguinTitle,\n  penguinImage,\n  penguinInfo,\n  penguinControlls,\n  updatePenguin,\n  addEventClickListener,\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}